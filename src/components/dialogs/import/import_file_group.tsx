import { CoordinateStringOptionsForm } from "src/components/coordinate_string_options_form";
import {
  CsvOptionsForm,
  XlsOptionsForm,
} from "src/components/csv_options_form";
import { SelectFileType } from "src/components/fields";
import * as E from "src/components/elements";
import * as C from "@radix-ui/react-collapsible";
import { Formik, FormikHelpers, Form } from "formik";
import { useImportFile } from "src/hooks/use_import";
import {
  Progress,
  ImportOptions,
  DEFAULT_IMPORT_OPTIONS,
} from "src/lib/convert";
import { FileGroup } from "src/lib/group_files";
import { useState } from "react";
import { OnNext } from "../import";
import { AutoDetect } from "../autodetect";
import SimpleDialogActions from "../simple_dialog_actions";
import { FileWarning } from "./file_warning";
import { ImportProgressBar } from "./import_progress_bar";
import { ConvertResult, InpResult } from "src/lib/convert/utils";
import { Either } from "purify-ts/Either";
import { ConvertError } from "src/lib/errors";

type SecondaryAction = React.ComponentProps<
  typeof SimpleDialogActions
>["secondary"];

function GeoJSONOptionsForm() {
  return (
    <C.Root>
      <C.Trigger asChild>
        <E.Button size="xs">Advanced options</E.Button>
      </C.Trigger>

      <C.Content className="space-y-2 pl-2 pt-4">
        <div className="space-y-1">
          <label className="flex items-center">
            <E.FieldCheckbox type="checkbox" name="removeCoincidents" />
            <div className="pl-2 text-sm">Remove coincident vertices</div>
          </label>
          <E.TextWell>
            Removes consecutive vertices with the same coordinate values that
            can be generated by other tools.
          </E.TextWell>
        </div>
      </C.Content>
    </C.Root>
  );
}

export function ImportFileGroup({
  onNext,
  hasNext,
  onClose,
  secondary,
  file: fileGroup,
}: {
  onNext: OnNext;
  hasNext: boolean;
  onClose: () => void;
  secondary: SecondaryAction;
  file: FileGroup;
}) {
  const { file } = fileGroup;
  const doImport = useImportFile();
  const [progress, setProgress] = useState<Progress | null>(null);

  return (
    <Formik
      onSubmit={async function onSubmit(
        options: ImportOptions,
        helpers: FormikHelpers<ImportOptions>,
      ) {
        try {
          // Don't show a toast if we're going to import
          // another feature.
          options = { ...options, toast: !hasNext };
          const res = await doImport(file, options, (newProgress) => {
            setProgress(newProgress);
          });
          if (
            (res as ConvertResult).type &&
            (res as ConvertResult).type === "inp"
          ) {
            return onNext(res as InpResult);
          }

          await (res as Either<ConvertError, Promise<ConvertResult>>).caseOf({
            Left(err: Error) {
              setProgress(null);
              helpers.setErrors({ type: err.message });
              return Promise.resolve();
            },
            Right: async (result: Promise<ConvertResult>) => {
              return onNext(await result);
            },
          });
        } catch (e: any) {
          helpers.setErrors({
            type: e.message,
          });
        }
      }}
      initialValues={{
        ...DEFAULT_IMPORT_OPTIONS,
        type: "geojson",
        text: "",
        toast: true,
        secondary: false,
      }}
    >
      <Form>
        <div>
          <div className="space-y-4">
            <SelectFileType />
            <CoordinateStringOptionsForm />
            <CsvOptionsForm file={file} geocoder />
            <GeoJSONOptionsForm />
            <XlsOptionsForm file={file} geocoder />
          </div>
          <FileWarning file={fileGroup}>
            <SimpleDialogActions
              secondary={secondary}
              onClose={onClose}
              action="Import"
            />
          </FileWarning>
          <ImportProgressBar progress={progress} />
        </div>
        <AutoDetect file={file} />
      </Form>
    </Formik>
  );
}
